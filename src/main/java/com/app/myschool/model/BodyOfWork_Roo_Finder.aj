// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.app.myschool.model;

import com.app.myschool.model.BodyOfWork;
import com.app.myschool.model.Quarter;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect BodyOfWork_Roo_Finder {
    
    public static Long BodyOfWork.countFindBodyOfWorksByQuarter(Quarter quarter) {
        if (quarter == null) throw new IllegalArgumentException("The quarter argument is required");
        EntityManager em = BodyOfWork.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM BodyOfWork AS o WHERE o.quarter = :quarter", Long.class);
        q.setParameter("quarter", quarter);
        return ((Long) q.getSingleResult());
    }
    
    public static Long BodyOfWork.countFindBodyOfWorksByWorkName(String workName) {
        if (workName == null || workName.length() == 0) throw new IllegalArgumentException("The workName argument is required");
        EntityManager em = BodyOfWork.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM BodyOfWork AS o WHERE o.workName = :workName", Long.class);
        q.setParameter("workName", workName);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<BodyOfWork> BodyOfWork.findBodyOfWorksByQuarter(Quarter quarter) {
        if (quarter == null) throw new IllegalArgumentException("The quarter argument is required");
        EntityManager em = BodyOfWork.entityManager();
        TypedQuery<BodyOfWork> q = em.createQuery("SELECT o FROM BodyOfWork AS o WHERE o.quarter = :quarter", BodyOfWork.class);
        q.setParameter("quarter", quarter);
        return q;
    }
    
    public static TypedQuery<BodyOfWork> BodyOfWork.findBodyOfWorksByQuarter(Quarter quarter, String sortFieldName, String sortOrder) {
        if (quarter == null) throw new IllegalArgumentException("The quarter argument is required");
        EntityManager em = BodyOfWork.entityManager();
        String jpaQuery = "SELECT o FROM BodyOfWork AS o WHERE o.quarter = :quarter";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<BodyOfWork> q = em.createQuery(jpaQuery, BodyOfWork.class);
        q.setParameter("quarter", quarter);
        return q;
    }
    
    public static TypedQuery<BodyOfWork> BodyOfWork.findBodyOfWorksByWorkName(String workName) {
        if (workName == null || workName.length() == 0) throw new IllegalArgumentException("The workName argument is required");
        EntityManager em = BodyOfWork.entityManager();
        TypedQuery<BodyOfWork> q = em.createQuery("SELECT o FROM BodyOfWork AS o WHERE o.workName = :workName", BodyOfWork.class);
        q.setParameter("workName", workName);
        return q;
    }
    
    public static TypedQuery<BodyOfWork> BodyOfWork.findBodyOfWorksByWorkName(String workName, String sortFieldName, String sortOrder) {
        if (workName == null || workName.length() == 0) throw new IllegalArgumentException("The workName argument is required");
        EntityManager em = BodyOfWork.entityManager();
        String jpaQuery = "SELECT o FROM BodyOfWork AS o WHERE o.workName = :workName";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<BodyOfWork> q = em.createQuery(jpaQuery, BodyOfWork.class);
        q.setParameter("workName", workName);
        return q;
    }
    
}
