/*
 * File: app/controller/monthly/SummaryRatingsController.js
 *
 * This file was generated by Sencha Architect version 3.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MySchool.controller.monthly.SummaryRatingsController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.monthlysummaryratingscontroller',

    models: [
        'monthly.SummaryRatings'
    ],
    stores: [
        'monthly.SummaryRatingsStore',
        'student.StudentStore',
        'subject.SubjectStore'
    ],

    refs: [
        {
            ref: 'MonthlyDetailsTabPanel',
            selector: 'monthlydetailstabpanel'
        },
        {
            ref: 'MonthlyFeelingsTabPanel',
            selector: 'monthlyfeelingstabpanel'
        },
        {
            ref: 'MonthlyReflectionsTabPanel',
            selector: 'monthlyrelectionstabpanel'
        },
        {
            ref: 'MonthlyPatternsOfCorrectionsTabPanel',
            selector: 'monthlypatternsofcorrectionstabpanel'
        },
        {
            ref: 'MonthlyEffectivenessOfActionsTabPanel',
            selector: 'monthlyeffectivenessofactionstabpanel'
        },
        {
            ref: 'MonthlyActionResultsTabPanel',
            selector: 'monthlyactionresultstabpanel'
        },
        {
            ref: 'MonthlyRealizationsTabPanel',
            selector: 'monthlyrealizationstabpanel'
        },
        {
            ref: 'MonthlyPlannedChangesTabPanel',
            selector: 'monthlyplannedchangestabpanel'
        },
        {
            ref: 'MonthlyCommentsTabPanel',
            selector: 'monthlycommentstabpanel'
        },
        {
            ref: 'EditMonthlyPlannedChangesTabPanel',
            selector: '#editmonthlyplannedchangestabpanel'
        },
        {
            ref: 'MonthlyDetailsGridPanel',
            selector: 'monthlydetailsgridpanel'
        }
    ],

    onMonthlysummarygridpanelSelectionChange: function(model, selected, eOpts) {
        debugger;
        // in the onMyJsonStoreLoad we do a deselect so we need to test
        // if selected[0] has a value
        if ( Ext.isDefined( selected  ) && Ext.isDefined( selected[0]  )) {
            var tabPanel = this.getMonthlyFeelingsTabPanel();
                console.log( tabPanel );
            this.loadTabPanelForm( tabPanel, selected );
            tabPanel = this.getMonthlyReflectionsTabPanel();
                console.log( tabPanel );
            this.loadTabPanelForm( tabPanel, selected );
            tabPanel = this.getMonthlyPatternsOfCorrectionsTabPanel();
                console.log( tabPanel );
            this.loadTabPanelForm( tabPanel, selected );
            tabPanel = this.getMonthlyEffectivenessOfActionsTabPanel();
                console.log( tabPanel );
            this.loadTabPanelForm( tabPanel, selected );
            tabPanel = this.getMonthlyActionResultsTabPanel();
                console.log( tabPanel );
            this.loadTabPanelForm( tabPanel, selected );
            tabPanel = this.getMonthlyRealizationsTabPanel();
                console.log( tabPanel );
            this.loadTabPanelForm( tabPanel, selected );
            tabPanel = this.getMonthlyPlannedChangesTabPanel();
                console.log( tabPanel );
            this.loadTabPanelForm( tabPanel, selected );
            tabPanel = this.getMonthlyCommentsTabPanel();
                console.log( tabPanel );
            this.loadTabPanelForm( tabPanel, selected );

            console.log('onMonthlysummarygridpanelSelectionChange()');
        }
    },

    onMonthlysummarydetailspanelActivate: function(component, eOpts) {

    },

    onMonthlyfeelingstabpanelActivate: function(component, eOpts) {
        //debugger;
        console.log( "onMonthlyfeelingstabpanelActivate");
    },

    onMonthlysummarygridviewViewReady: function(dataview, eOpts) {
        debugger;
        console.log('onMonthlysummarygridviewViewReady()');
        var myStore = Ext.getStore('monthly.SummaryRatingsStore');
        var myStudentStore = Ext.getStore('student.StudentStore');
        var studentRecord = myStudentStore.getAt(0);
        //        debugger
        if ( typeof( studentRecord ) != "undefined" ) {
            var studentName_ = studentRecord.get('firstName') + " " + studentRecord.get('middleName') + ' ' + studentRecord.get('lastName');
            //MonthlyDetailsGridPanel
            //var myGrid = Ext.ComponentQuery.query("#bodiesofworkssubjectsgrid")[0];
            var myGrid = this.getMonthlyDetailsGridPanel();

            myGrid.setTitle('[' + studentName_ + ']');
            myStore.load({
                callback: this.onMyJsonStoreLoad,
                scope: this,
                params: {
                    studentName: studentRecord.get('userName'),
                    studentId: studentRecord.get('id')
                }
            });
        }
        //grid.getSelectionModel().select( 0 );
        //tablepanel.getSelectionModel().select( 0 );

    },

    onFeelingstextboxBlur: function(component, e, eOpts) {
        this.blurHandler( component, e, this );
    },

    onEditmonthlyfeelingstabpanelClick: function(button, e, eOpts) {
        this.buttonHandler( button, e, eOpts );
    },

    onEditmonthlypatternsofcorrectionstabpanelClick: function(button, e, eOpts) {
        this.buttonHandler( button, e, eOpts );
    },

    onEffectivenestextboxBlur: function(component, e, eOpts) {
        this.blurHandler( component, e, this );
    },

    onEditmonthlyeffectivenessofactionstabpanelClick: function(button, e, eOpts) {
        this.buttonHandler( button, e, eOpts );
    },

    onActionresultstextboxBlur: function(component, e, eOpts) {
        this.blurHandler( component, e, this );
    },

    onEditmonthyactionresultstabpanelClick: function(button, e, eOpts) {
        this.buttonHandler( button, e, eOpts );
    },

    onEditmonthlyrealizationstabpanelClick: function(button, e, eOpts) {
        this.buttonHandler( button, e, eOpts );
    },

    onRealizationstextboxBlur: function(component, e, eOpts) {
        this.blurHandler( component, e, this );
    },

    onPlannedchangestextboxBlur: function(component, e, eOpts) {
        this.blurHandler( component, e, this );
    },

    onEditmonthlyplannedchangestabpanelClick: function(button, e, eOpts) {
        this.buttonHandler( button, e, eOpts );
    },

    onCommentstextboxBlur: function(component, e, eOpts) {
        this.blurHandler( component, e, this );
    },

    onRefreshmonthlysummariestoolClick: function(tool, e, eOpts) {
        var myStore = Ext.getStore('monthly.SummaryRatingsStore');
        myStore.reload();
    },

    onEditmonthlycommentstabpanelClick: function(button, e, eOpts) {
        this.buttonHandler( button, e, eOpts );
    },

    onSavemonthlysummariestoolClick: function(tool, e, eOpts) {
        window.console.log( "monthly.SummaryRatingsController.Save" );
        debugger;

        var mystore = Ext.getStore("monthly.SummaryRatingsStore");

        var records = mystore.getModifiedRecords();
        for( var i = 0; i < records.length; i++ )
        {
            records[i].set( 'lastUpdated', new Date() );
            records[i].set( 'whoUpdated', 'login');
        }

        mystore.sync();
    },

    onNewmonthlysummariestoolClick: function(tool, e, eOpts) {
        debugger;
        var studentStore = Ext.getStore('student.StudentStore');
        var subjectStore = Ext.getStore( 'subject.SubjectStore');
        var commonQuarterSubjectStore = Ext.getStore( 'common.QuarterSubjectStore');
        var commonMonthStore = Ext.getStore('common.MonthStore');

        var studentRecord = studentStore.getAt(0);
        var studentId = studentRecord.get( 'id' );
        var studentName = studentRecord.get( 'userName' );

        var newDialog = Ext.create( 'MySchool.view.monthly.summary.NewSummaryFormPanel' );

        newDialog.down('#newmonthlysummary-studentid').setValue( studentId );
        newDialog.down('#newmonthlysummary-studentname').setValue( studentName );

        //commonQuarterSubjectStore.myLoad();
        commonMonthStore.myLoad();



        window.console.log( 'New Monthly Summary Dialog' );


        newDialog.render( Ext.getBody() );
        newDialog.show();
    },

    onNewmonthlysummarycanelClick: function(button, e, eOpts) {
        //debugger;
        window.console.log( "Cancel New Monthly Summary" );
        var myForm = button.up().getForm();
        myForm.reset();
        button.up().hide();
    },

    onNewmonthlysummarysubmitClick: function(button, e, eOpts) {
        debugger;
        window.console.log( "Submit New Monthly Summary" );
        var myForm					= button.up().getForm();
        //var newDialog = button.up('monthlynewsummaryformpanel');

        //Get the values from the form and insert a new record into the MonthlySummaryView.

        var formValues				= myForm.getValues();

        //	Create an empty record
        var summaryRatingsRecord	= Ext.create('MySchool.model.monthly.SummaryRatings');

        //	Get the stores that we will need
        var summaryRatingsStore		= this.getStore( 'monthly.SummaryRatingsStore' );

        var studentStore = Ext.getStore('student.StudentStore');
        var subjectStore = Ext.getStore( 'subject.SubjectStore' );

        //	Get the student info
        var studentRecord	= studentStore.getAt(0);
        var studentId		= studentRecord.get( 'id' );
        var studentName		= studentRecord.get( 'userName' );

        //	Get the quarterSubject record from the form.
        var quarterSubjectId		= formValues.comboquartersubject;
        var quarterSubjectRecord;
        for( var i = 0; i < subjectStore.count(); i++ )
        {
            if( subjectStore.getAt(i).get('id') === quarterSubjectId )
            {
                quarterSubjectRecord = subjectStore.getAt(i);
                break;
            }
        }

        if( typeof quarterSubjectRecord !== 'undefined')
        {
            //	Get the other information that we need for the new record.
            var subjName	= quarterSubjectRecord.get('subjName');
            var subjId		= quarterSubjectRecord.get('subjId');
            var qtrName		= quarterSubjectRecord.get('qtrName');
            var qtrId		= quarterSubjectRecord.get('qtrId');
            var qtrYear		= quarterSubjectRecord.get('qtrYear');
            //var month_number = formValues.combomonth;

            //var allSubjRec_ = myAllSubjStore.findRecord( 'subjName', subjName );
            //var subjId_ = allSubjRec_.get( 'subjId' );


            //Add the data to the new record.
            if( formValues.combomonth > 0 )
            {
                summaryRatingsRecord.set('month_number', formValues.combomonth);

                summaryRatingsRecord.set('subjName', subjName );
                summaryRatingsRecord.set('subjId', subjId );
                summaryRatingsRecord.set('qtrName', qtrName );
                summaryRatingsRecord.set('qtrId', qtrId);
                summaryRatingsRecord.set('studentId', studentId);
                summaryRatingsRecord.set('studentUserName', studentName);
                summaryRatingsRecord.set('qtrYear', qtrYear);
                summaryRatingsRecord.set('locked', 0 );
                summaryRatingsRecord.set('feelings', formValues.feelings);
                summaryRatingsRecord.set('patternsOfCorrections', formValues.patternsofcorrections);
                summaryRatingsRecord.set('effectivenessOfActions', formValues.effectivenessofactions);
                summaryRatingsRecord.set('realizations', formValues.realizations);
                summaryRatingsRecord.set('reflections', formValues.reflections);
                summaryRatingsRecord.set('plannedChanges', formValues.plannedchanges);
                summaryRatingsRecord.set('comments', formValues.comments);
                summaryRatingsRecord.set('actionResults', formValues.actionresults);
                summaryRatingsRecord.set('whoUpdated', 'login');
                summaryRatingsRecord.set('lastUpdated', new Date());
                summaryRatingsRecord.set('version', null);
                summaryRatingsRecord.set( 'summaryId', 0 );

                //add to the store

                summaryRatingsStore.add( summaryRatingsRecord );

                //sync the store.
                summaryRatingsStore.sync();

                myForm.reset();
                button.up().hide();
            }
            else
            {
                var smsg = "You must enter a value for month";
                Ext.MessageBox.show({
                    title: 'REMOTE EXCEPTION',
                    msg: smsg,
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.Msg.OK
                });
            }
        }
        else
        {
            var msg = "You must have student/faculty/subject/quarter records.";
                    Ext.MessageBox.show({
                    title: 'NO DATA',
                    msg: smsg,
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.Msg.OK
                });
        }

    },

    onReflectionstextboxBlur: function(component, e, eOpts) {
        this.blurHandler( component, e, this );
    },

    onEditmonthlyreflectionstabpanelClick: function(button, e, eOpts) {
        this.buttonHandler( button, e, eOpts );
    },

    onPatternofcorrectionstextboxBlur: function(component, e, eOpts) {
        this.blurHandler( component, e, this );
    },

    blurHandler: function(o, event, eOpts) {
        debugger;
        var p_ = o.up('form').up('panel');
        var topP_ = p_.up('panel');
        var pItemId_ = p_.getItemId();
        var edit_ = p_.down('#edit' + pItemId_);

        Ext.Msg.show({
            title:'Save Changes?',
            msg: 'Would you like to save your changes to ' + pItemId_ + ' ?',
            buttons: Ext.Msg.YESNO,
            icon: Ext.Msg.QUESTION,
            fn: function(buttonId) {
                if (buttonId == 'yes') {
                    Ext.Msg.show({
                        title: 'Save',
                        msg: 'record saved',
                        buttons: Ext.Msg.OK,
                        icon: Ext.window.MessageBox.INFO
                    });
                }
                else {
                    Ext.Msg.show({
                        title: 'Cancel',
                        msg: 'record restored',
                        buttons: Ext.Msg.OK,
                        icon: Ext.window.MessageBox.INFO
                    });
                }
                topP_ = eOpts;
                //topP_.buttonHandler.call(edit_);
                topP_.buttonHandler(edit_);
            }
        });
    },

    buttonHandler: function(button, e, eOpts) {
        debugger;
        window.console.log(button);
        var b_ = button;
        var p_ = b_.up('panel');
        var pItemId_ = p_.getItemId();
        var field_;

        //if (pItemId_ == 'monthlyfeelingstabpanel') {
        //    field_ = p_.down('numberfield');
        //} else {
        //    field_ = p_.down('textareafield');
        //}
        field_ = p_.down('textareafield');

        if (b_.getText().charAt(0) == 'D') {
            b_ = p_.down('#edit' + pItemId_);
            b_.setText('Edit');
            b_.setDisabled(false);
            field_.setDisabled(true);
        } else {
            b_.setText('Done');
            field_.setDisabled(false);
            field_.focus();
        }
    },

    onMyJsonStoreLoad: function() {
        //debugger;
        //var g_ = Ext.ComponentQuery.query("#monthlysummarygridpanel")[0];
        var g_ = this.getMonthlyDetailsGridPanel();

        if (g_.getStore().getCount() > 0) {
            g_.getSelectionModel().deselectAll();
            g_.getSelectionModel().select( 0 );
        }

        this.gridViewReady = true;
    },

    loadTabPanelForm: function(tabPanel, selected) {
        var dockedItems = tabPanel.getDockedItems();
        var myForm = dockedItems[0].getForm();
        if( Ext.isDefined( myForm ) === false )
        {
            myForm = dockedItems[1].getForm();
        }
        if( Ext.isDefined( myForm ) )
        {
            console.log( myForm );
            myForm.loadRecord( selected[0] );
        }
        else
        {
            console.log( 'No form' );
            console.log( tabPenel );
        }
    },

    init: function(application) {
        this.control({
            "#monthlysummarygridpanel": {
                selectionchange: this.onMonthlysummarygridpanelSelectionChange
            },
            "#monthlysummarydetailspanel": {
                activate: this.onMonthlysummarydetailspanelActivate
            },
            "#monthlyfeelingstabpanel": {
                activate: this.onMonthlyfeelingstabpanelActivate
            },
            "#monthlysummarygridview": {
                viewready: this.onMonthlysummarygridviewViewReady
            },
            "#feelingstextbox": {
                blur: this.onFeelingstextboxBlur
            },
            "#editmonthlyfeelingstabpanel": {
                click: this.onEditmonthlyfeelingstabpanelClick
            },
            "#editmonthlypatternsofcorrectionstabpanel": {
                click: this.onEditmonthlypatternsofcorrectionstabpanelClick
            },
            "#effectivenestextbox": {
                blur: this.onEffectivenestextboxBlur
            },
            "#editmonthlyeffectivenessofactionstabpanel": {
                click: this.onEditmonthlyeffectivenessofactionstabpanelClick
            },
            "#actionresultstextbox": {
                blur: this.onActionresultstextboxBlur
            },
            "#editmonthyactionresultstabpanel": {
                click: this.onEditmonthyactionresultstabpanelClick
            },
            "#editmonthlyrealizationstabpanel": {
                click: this.onEditmonthlyrealizationstabpanelClick
            },
            "#realizationstextbox": {
                blur: this.onRealizationstextboxBlur
            },
            "#plannedchangestextbox": {
                blur: this.onPlannedchangestextboxBlur
            },
            "#editmonthlyplannedchangestabpanel": {
                click: this.onEditmonthlyplannedchangestabpanelClick
            },
            "#commentstextbox": {
                blur: this.onCommentstextboxBlur
            },
            "#refreshmonthlysummariestool": {
                click: this.onRefreshmonthlysummariestoolClick
            },
            "#editmonthlycommentstabpanel": {
                click: this.onEditmonthlycommentstabpanelClick
            },
            "#savemonthlysummariestool": {
                click: this.onSavemonthlysummariestoolClick
            },
            "#newmonthlysummariestool": {
                click: this.onNewmonthlysummariestoolClick
            },
            "#newmonthlysummarycanel": {
                click: this.onNewmonthlysummarycanelClick
            },
            "#newmonthlysummarysubmit": {
                click: this.onNewmonthlysummarysubmitClick
            },
            "#reflectionstextbox": {
                blur: this.onReflectionstextboxBlur
            },
            "#editmonthlyreflectionstabpanel": {
                click: this.onEditmonthlyreflectionstabpanelClick
            },
            "#patternofcorrectionstextbox": {
                blur: this.onPatternofcorrectionstextboxBlur
            }
        });
    }

});
