/*
 * File: app/controller/daily/MyController.js
 *
 * This file was generated by Sencha Architect version 3.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MySchool.controller.daily.MyController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.dailycontroller',

    models: [
        'daily.DailyModel'
    ],
    stores: [
        'daily.MyJsonStore',
        'subject.SubjectStore',
        'student.StudentStore'
    ],

    refs: [
        {
            ref: 'DailyGridPanel',
            selector: '#dailygridpanel'
        },
        {
            ref: 'DailyResourcesUsedTabPanel',
            selector: '#dailyresourcesusedtabpanel'
        },
        {
            ref: 'DailyStudyDetailsTabPanel',
            selector: '#dailystudydetailstabpanel'
        },
        {
            ref: 'DailyDetailsEvaluationTabPanel',
            selector: '#dailydetailsevaluationtabpanel'
        },
        {
            ref: 'DailyDetailsActionsTabPanel',
            selector: '#dailydetailsactionstabpanel'
        },
        {
            ref: 'DailyCommentsTabPanel',
            selector: '#dailydetailscommentstabpanel'
        },
        {
            ref: 'DailyDetailsCorrectionTabPanel',
            selector: '#dailydetailscorrectiontabpanel'
        }
    ],

    onEditdailyhourstabClick: function(button, e, eOpts) {
        this.buttonHandler( button, e, eOpts );
    },

    onDailydetailsformhournumberfieldBlur: function(component, e, eOpts) {
        this.blurHandler( component, e, this );
    },

    onDailyrefreshtoolClick: function(tool, e, eOpts) {
        var myStore = Ext.getStore('daily.MyJsonStore');
        myStore.reload();
    },

    onDailysearchtoolClick: function(tool, e, eOpts) {

    },

    onDailynewtoolClick: function(tool, e, eOpts) {

    },

    onDailysavetoolClick: function(tool, e, eOpts) {

    },

    onDailydeletetoolClick: function(tool, e, eOpts) {

    },

    onDailylocktoolClick: function(tool, e, eOpts) {

    },

    onDailygridpanelSelectionChange: function(model, selected, eOpts) {
        debugger;
        // in the onMyJsonStoreLoad we do a deselect so we need to test
        // if selected[0] has a value
        if ( Ext.isDefined( selected  ) && Ext.isDefined( selected[0]  )) {
            var tabPanel = this.getDailyResourcesUsedTabPanel();
                console.log( tabPanel );
            this.loadTabPanelForm( tabPanel, selected, 'resourcesUsed' );
            tabPanel = this.getDailyStudyDetailsTabPanel();
                console.log( tabPanel );
            this.loadTabPanelForm( tabPanel, selected, 'studyDetails' );
            tabPanel = this.getDailyDetailsEvaluationTabPanel();
                console.log( tabPanel );
            this.loadTabPanelForm( tabPanel, selected, 'evaluation' );
            tabPanel = this.getDailyDetailsCorrectionTabPanel();
                console.log( tabPanel );
            this.loadTabPanelForm( tabPanel, selected, 'correction' );
            tabPanel = this.getDailyDetailsActionsTabPanel();
                console.log( tabPanel );
            this.loadTabPanelForm( tabPanel, selected, 'dailyAction' );
            tabPanel = this.getDailyCommentsTabPanel();
                console.log( tabPanel );
            this.loadTabPanelForm( tabPanel, selected, 'comments' );

            console.log('onDailygridpanelSelectionChange()');
        }
    },

    onDailygridpanelViewReady: function(tablepanel, eOpts) {
        debugger;
        console.log('onDailygridpanelViewReady()');
        var myStore = Ext.getStore('daily.MyJsonStore');
        var myStudentStore = Ext.getStore('student.StudentStore');
        var studentRecord = myStudentStore.getAt(0);
        //        debugger
        if ( typeof( studentRecord ) != "undefined" ) {
            var studentName_ = studentRecord.get('firstName') + " " + studentRecord.get('middleName') + ' ' + studentRecord.get('lastName');
            //MonthlyDetailsGridPanel
            //var myGrid = Ext.ComponentQuery.query("#bodiesofworkssubjectsgrid")[0];
            var myGrid = this.getDailyGridPanel();

            myGrid.setTitle('[' + studentName_ + ']');
            myStore.load({
                callback: this.onMyJsonStoreLoad,
                scope: this,
                params: {
                    studentName: studentRecord.get('userName'),
                    studentId: studentRecord.get('id')
                }
            });
        }
        //grid.getSelectionModel().select( 0 );
        //tablepanel.getSelectionModel().select( 0 );

    },

    buttonHandler: function(button, e, eOpts) {
        debugger;
        window.console.log(button);
        var b_		= button;
        var form	= b_.up('panel');
        var p_		= form.up();
        var pItemId_ = p_.getItemId();
        var field_;

        if (pItemId_ == 'dailyhourstab') {
            field_ = p_.down('numberfield');
        } else {
            field_ = p_.down('textareafield');
        }

        if (b_.getText().charAt(0) == 'D') {
            b_ = p_.down('#edit' + pItemId_);
            b_.setText('Edit');
            b_.setDisabled(false);
            field_.setDisabled(true);
        } else {
            b_.setText('Done');
            field_.setDisabled(false);
            field_.focus();
        }
    },

    blurHandler: function(o, event, eOpts) {
        //debugger;
        var p_ = o.up('form').up('panel');
        var topP_ = p_.up('panel');
        var pItemId_ = p_.getItemId();
        var edit_ = p_.down('#edit' + pItemId_);
        console.log( edit_ );
        console.log( topP_ );
        //topP_.buttonHandler(edit_);

        Ext.Msg.show({
            title:'Save Changes?',
            msg: 'Would you like to save your changes to ' + pItemId_ + ' ?',
            buttons: Ext.Msg.YESNO,
            icon: Ext.Msg.QUESTION,
            fn: function(buttonId) {
                if (buttonId == 'yes') {
                    Ext.Msg.show({
                        title: 'Save',
                        msg: 'record saved',
                        buttons: Ext.Msg.OK,
                        icon: Ext.window.MessageBox.INFO
                    });
                }
                else {
                    Ext.Msg.show({
                        title: 'Cancel',
                        msg: 'record restored',
                        buttons: Ext.Msg.OK,
                        icon: Ext.window.MessageBox.INFO
                    });
                }
                //topP_ = eOpts;
                //topP_.buttonHandler.call(edit_);
                //edit.setText('Edit');
                console.log( topP_ );
                topP_.buttonHandler(edit_);
                //p_.buttonHandler(edit_);
            }
        });
        debugger;
        this.buttonHandler( edit_ );
    },

    init: function(application) {
                this.control({
                    "#editdailytesttabpanel": {
                        click: this.buttonHandler
                    },
                    "#dailytesttabpaneltextbox": {
                        blur: this.blurHandler
                    },
                    "#editdailyresourcesusedtabpanel": {
                        click: this.buttonHandler
                    },
                    "#dailyresourcesusedtabpaneltextbox": {
                        blur: this.blurHandler
                    },
                    "#editdailystudydetailstabpanel": {
                        click: this.buttonHandler
                    },
                    "#dailystudydetailstabpaneltextbox": {
                        blur: this.blurHandler
                    },
                    "#editdailydetailsevaluationtabpanel": {
                        click: this.buttonHandler
                    },
                    "#dailydetailsevaluationtabpaneltextbox": {
                        blur: this.blurHandler
                    },
                    "#editdailydetailscorrectiontabpanel": {
                        click: this.buttonHandler
                    },
                    "#dailydetailscorrectiontabpaneltextbox": {
                        blur: this.blurHandler
                    },
                    "#editdailydetailsactionstabpanel": {
                        click: this.buttonHandler
                    },
                    "#dailydetailsactionstabpaneltextbox": {
                        blur: this.blurHandler
                    },
                    "#editdailydetailscommentstabpanel": {
                        click: this.buttonHandler
                    },
                    "#dailydetailscommentstabpaneltextbox": {
                        blur: this.blurHandler
                    }

                });

        this.control({
            "#editdailyhourstab": {
                click: this.onEditdailyhourstabClick
            },
            "#dailydetailsformhournumberfield": {
                blur: this.onDailydetailsformhournumberfieldBlur
            },
            "#dailyrefreshtool": {
                click: this.onDailyrefreshtoolClick
            },
            "#dailysearchtool": {
                click: this.onDailysearchtoolClick
            },
            "#dailynewtool": {
                click: this.onDailynewtoolClick
            },
            "#dailysavetool": {
                click: this.onDailysavetoolClick
            },
            "#dailydeletetool": {
                click: this.onDailydeletetoolClick
            },
            "#dailylocktool": {
                click: this.onDailylocktoolClick
            },
            "#dailygridpanel": {
                selectionchange: this.onDailygridpanelSelectionChange,
                viewready: this.onDailygridpanelViewReady
            }
        });
    },

    onMyJsonStoreLoad: function() {
        //debugger;
        //var g_ = Ext.ComponentQuery.query("#monthlysummarygridpanel")[0];
        var g_ = this.getDailyGridPanel();

        if (g_.getStore().getCount() > 0) {
            g_.getSelectionModel().deselectAll();
            g_.getSelectionModel().select( 0 );
        }

        this.gridViewReady = true;
    },

    loadTabPanelForm: function(tabPanel, selected, fieldname) {
        debugger;
        var dockedItems = tabPanel.getDockedItems();
        var myForm = dockedItems[0];

        if( Ext.isDefined( myForm ) )
        {
            console.log( myForm );
            //var textBox = myForm.dockedItems.items[0];
            var textBox = myForm.down('textareafield');
            textBox.name = fieldname;
            myForm.loadRecord( selected[0] );
        }
        else
        {
            console.log( 'loadTabPanelForm(): No form' );
            //console.log( tabPanel );
        }
    }

});
