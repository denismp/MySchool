/*
 * File: app/model/subject/SubjectsModel.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MySchool.model.subject.SubjectsModel', {
    extend: 'Ext.data.Model',

    uses: [
        'MySchool.model.quarters.QuarterModel'
    ],

    writeStructuredData: 'true',

    fields: [
        {
            name: 'id'
        },
        {
            name: 'name',
            type: 'string'
        },
        {
            name: 'gradeLevel',
            type: 'int'
        },
        {
            name: 'creditHours',
            type: 'int'
        },
        {
            name: 'completed',
            type: 'boolean'
        },
        {
            name: 'whoUpdated',
            type: 'string'
        },
        {
            dateFormat: 'm/d/Y',
            name: 'lastUpdated',
            type: 'date'
        },
        {
            name: 'description',
            type: 'string'
        },
        {
            name: 'objectives',
            type: 'string'
        },
        {
            name: 'version',
            type: 'string'
        },
        {
            name: 'quarter',
            type: 'auto'
        },
        {
            name: 'userName',
            type: 'string'
        }
    ],

    hasOne: {
        model: 'MySchool.model.quarters.QuarterModel',
        reader: {
            type: 'json',
            root: 'data'
        }
    },

    belongsTo: {
        model: 'MySchool.model.quarters.QuarterModel'
    },

    getWriteData: function() {
        var data = this.getRecordWriteData(this),
            associations = this.associations.items,
            association, type, name, associatedStore,
            associatedRecords, associatedRecord,
            a, aLen, r, rLen;

        for (a=0, aLen=associations.length; a<aLen; a++) {

            association = associations[a];
            type = association.type;
            name = association.name;

            if (type == 'hasMany') {

                associatedStore = this[association.storeName];
                // Initialize the array for this association
                data[name] = [];

                // If the association's loaded, process its records
                if (associatedStore && associatedStore.getCount() > 0) {
                    associatedRecords = associatedStore.data.items;

                    // Append data for each record
                    for (r=0, rLen=associatedRecords.length; r<rLen; r++) {
                        data[name][r] = this.getRecordWriteData(associatedRecords[r]);
                    }
                }

            } else if (type == 'hasOne') {
                associatedRecord = this[association.instanceName];
                // If the record exists, append its data
                if (associatedRecord !== undefined) {
                    data[name] = this.getRecordWriteData(associatedRecord);
                }
            }

        }

        return data;

    },

    getRecordWriteData: function(record) {
        var isPhantom = record.phantom === true,
            writeAllFields = record.writeAllFields,
            fields = record.fields,
            fieldItems = fields.items,
            data = {},
            changes = record.getChanges(),
            field,
            key,
            f, fLen;

        for (f=0, fLen=fieldItems.length; f<fLen; f++) {
            field = fieldItems[f];

            if (field.forcePersist || (field.persist && (writeAllFields || isPhantom))) {
                this.setFieldWriteData(data, record, field, record.get(field.name));
            }
        }

        for (key in changes) {
            if (changes.hasOwnProperty(key)) {
                field = fields.get(key);
                if (field.persist) {
                    this.setFieldWriteData(data, record, field, changes[key]);
                }
            }
        }

        return data;
    }

});