/*
 * File: app/controller/subject/SubjectsController.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MySchool.controller.subject.SubjectsController', {
    extend: 'Ext.app.Controller',

    selectedIndex: '0',
    models: [
        'subject.SubjectsModel',
        'quarters.QuarterModel',
        'student.StudentModel',
        'subject.QuarterNamesModel'
    ],
    stores: [
        'subject.SubjectStore',
        'quarter.QuarterStore',
        'student.StudentStore',
        'subject.GradeTypeStore'
    ],
    views: [
        'MainPanel',
        'subject.SubjectsGridPanel',
        'subject.SubjectsForm',
        'subject.SubjectsPanel',
        'subject.GradeTypeComboBox',
        'subject.QuarterNamesComboBox'
    ],

    refs: [
        {
            ref: 'subjectsForm',
            selector: 'form'
        }
    ],

    constructor: function(cfg) {
        cfg = cfg || {};
        this.callParent(this.processSubjectSubjectsController(cfg));
    },

    processSubjectSubjectsController: function(config) {
        return config;
    },

    onSubjectsgridSelect: function(rowmodel, record, index, eOpts) {
        window.console.log( "selected row in grid." );
        window.console.log( "index=" + index );
        //debugger;
        //if ( record ) {
        //    this.getSubjectsForm().getForm().loadRecord(record);
        //}
        this.selectedIndex = index;
    },

    onSubjectdescriptiontextareaChange: function(field, newValue, oldValue, eOpts) {

        window.console.log( 'selectedIndex=' + this.selectedIndex );
        window.console.log( "onSubjectdescriptiontextareraChange() field=" + field );
        var mystore = Ext.getStore("subject.SubjectStore");
        var myrecord = mystore.getAt( this.selectedIndex );
        myrecord.set( 'description', newValue );


    },

    onSubjectobjectivetextareaChange: function(field, newValue, oldValue, eOpts) {

        window.console.log( 'selectedIndex=' + this.selectedIndex );
        window.console.log( "onSubjectobjectivetextareraChange() field=" + field );
        var mystore = Ext.getStore("subject.SubjectStore");
        var myrecord = mystore.getAt( this.selectedIndex );
        myrecord.set( 'objectives', newValue );
    },

    onTooldeletestudentsbysubjectClick: function(tool, e, eOpts) {
        window.console.log( 'Delete' );
    },

    onToolnewsubjectsClick: function(tool, e, eOpts) {
        //debugger;
        window.console.log( 'New' );
        var newDialog = Ext.create( 'MySchool.view.subject.NewForm' );
        //window.console.log( "DEBUG" );
        //newDialog.show();

        var mystore = Ext.getStore("subject.SubjectStore");
        var mynamestore = Ext.getStore( "subject.QuarterNameStore" );
        var myrecord = mystore.getAt( this.selectedIndex );
        //myrecord.set( 'description', newValue );
        window.console.log( myrecord.data );
        newDialog.loadRecord(myrecord);
        var myFormFields = newDialog.getForm().getFields();
        var myuserName = myrecord.data.quarter.student.userName;
        var mygradeType = myrecord.data.quarter.gradeType;
        var myquarterName = myrecord.data.quarter.qtrName;
        var qtrId = this.findQuarterIdByName( myquarterName );

        var mycomboview = myFormFields.getAt( 2 );  // Grade type selection for combobox.
        mycomboview.setValue( mygradeType );
        mycomboview = myFormFields.getAt( 7 ); // Quarter Name selection for combobox.
        mycomboview.setValue( qtrId );

        newDialog.getForm().setValues( { userName: myuserName } );

        newDialog.render( Ext.getBody() );
        newDialog.show();
    },

    onToolsearchsubjectsClick: function(tool, e, eOpts) {
        window.console.log( 'Search' );
    },

    onToolrefreshsubjectsClick: function(tool, e, eOpts) {
        // Add refresh handler code here.  Use example from chapter 2 of book.
        //debugger;
        window.console.log( 'Refresh' );
        var mystore = Ext.getStore("subject.SubjectStore");
        mystore.reload();
        //pnl.setTitle( 'Denis' );
    },

    onNewsubjectsubmitClick: function(button, e, eOpts) {
        //debugger;
        //var mystore = this.getSubjectStoreStore();
        window.console.log( "Submit New Subject" );
        var mystore = Ext.getStore("subject.SubjectStore");
        var myqtrstore = Ext.getStore( "subject.QuarterNameStore" );
        var myquarterstore = Ext.getStore( "quarter.QuarterStore" );
        var mystudentstore = Ext.getStore( "student.StudentStore" );
        var myrecords = myqtrstore.getRange( 0, 3 );
        for( var i = 0; i < 4; i++ )
        {
            window.console.log( "qtrName=" + myrecords[i].get( 'qtrName' ) );
        }
        var myForm = button.up().getForm();
        //debugger;
        // Get the data from the form and add a new subject record to the datbase.
        var myvalues = myForm.getFieldValues();
        var myfields = myForm.getFields();
        var creditHours = myvalues.creditHours;
        var description = myvalues.description;
        var gradeLevel = myvalues.gradeLevel;
        var subjectName = myvalues.name;
        var objectives = myvalues.objectives;
        var qtr_year = myvalues.qtr_year;
        var userName = myvalues.userName;

        var gradeTypeIntValue = myfields.getAt( 2 ).getValue();  // Grade type selection for combobox.

        var quarterNameIntValue = myfields.getAt( 7 ).getValue(); // Quarter Name selection for combobox.

        //	Now we need to put together the data to be inserted(and/or possibly updated).
        //	1. Search for the user's input of the quarter name and quarter year.
        debugger;
        var qtrRecord;
        var subjectRecord;
        var myQtrName = this.getQuarterName( quarterNameIntValue );

        //	If the myQtrName equals NONE, then there is no record for the quarter specified
        //	in the dialog.  A new record must be created from the user's input.
        if( myQtrName == 'NONE' )
        {
            var qtrModel = this.getModel( 'quarters.QuarterModel' );
            qtrModel.set( 'qtrName', myQtrName );
            qtrModel.set( 'qtr_year', qtr_year );
            qtrModel.set( 'gradeType', gradeTypeIntValue );
            qtrModel.set( 'grade', 0 );
            qtrModel.set( 'locked', 0 );
            qtrModel.set( 'whoUpdated', 'application' );
            qtrModel.set( 'lastUpdated', new Date() );
        }
        else
        {
            qtrRecord = this.getQuarterRecord( myQtrName, qtr_year );
        }
        //	2. Search for the user's input of the subject name, grade level, and credit hours.


        myForm.reset();
        button.up().hide();
    },

    onNewsubjectcancelClick: function(button, e, eOpts) {
        //debugger;
        window.console.log( "Cancel New Subject" );
        var myForm = button.up().getForm();
        myForm.reset();
        button.up().hide();
    },

    init: function(application) {

        this.control({
            'subjectsgridpanel': {
                selectionchange: this.gridSelectionChange,
                viewready: this.onViewReady
            },
            'subjectsavetool': {
                click: this.onSubjectsavetoolidClick
            }
        });


        this.control({
            "#subjectsgrid": {
                select: this.onSubjectsgridSelect
            },
            "#subjectdescriptiontextarea": {
                change: this.onSubjectdescriptiontextareaChange
            },
            "#subjectobjectivetextarea": {
                change: this.onSubjectobjectivetextareaChange
            },
            "#tooldeletestudentsbysubject": {
                click: this.onTooldeletestudentsbysubjectClick
            },
            "#toolnewsubjects": {
                click: this.onToolnewsubjectsClick
            },
            "#toolsearchsubjects": {
                click: this.onToolsearchsubjectsClick
            },
            "#toolrefreshsubjects": {
                click: this.onToolrefreshsubjectsClick
            },
            "#newsubjectsubmit": {
                click: this.onNewsubjectsubmitClick
            },
            "#newsubjectcancel": {
                click: this.onNewsubjectcancelClick
            }
        });
    },

    onViewReady: function(grid) {

        grid.getSelectionModel().select( 0 );
    },

    onSubjectsavetoolidClick: function(tool, e, eOpts) {
        window.console.log( "Save" );
        //debugger;

        var mystore = Ext.getStore("subject.SubjectStore");

        var records = mystore.getModifiedRecords();
        for( var i = 0; i < records.length; i++ )
        {
            records[i].set( 'lastUpdated', new Date() );
            var form = this.getSubjectsForm().getForm();
            var formValues = form.getValues();
            records[i].set( 'description', formValues.description );
            records[i].set( 'objectives', formValues.objectives );
            window.console.log( 'objectives=' + formValues.objectives );
            window.console.log( 'description=' + formValues.description );
        }

        mystore.sync();

    },

    gridSelectionChange: function(model, records) {
        //debugger;
        if ( records[0] ) {
            this.getSubjectsForm().getForm().loadRecord(records[0]);
        }
    },

    findQuarterIdByName: function(name) {
        var myqtrstore = Ext.getStore( "subject.QuarterNameStore" );
        var index = myqtrstore.findRecord( 'qtrName', name ).get( 'id' );
        return index;
    },

    getQuarterName: function(quarterNameID) {
        var mynamestore = Ext.getStore( "subject.QuarterNameStore" );
        var qtrStore = Ext.getStore( 'quarter.QuarterStore' );
        var recCount = mynamestore.getTotalCount();
        var qtrCount = qtrStore.getTotalCount();
        var records = mynamestore.getRange( 0, recCount );
        for( var i = 0; i < recCount; i++ )
        {
            window.console.log( "qtrName=" + records[i].get( 'qtrName' ) );
            window.console.log( "id=" + records[i].get( 'id' ) );
            var myId = records[i].get( 'id' );
            var myName = records[i].get( 'qtrName' );
            var qtrRecords = qtrStore.getRange( 0, qtrCount );
            for( var j = 0; j < qtrCount; j++ )
            {
                var qtrName = qtrRecords[j].get( 'qtrName' );
                var qtrYear = qtrRecords[j].get( 'qtr_year' );
                if( myId === quarterNameID && myName == qtrName )
                {
                    return qtrName;
                }
            }
        }
        return 'NONE';
    },

    getQuarterRecord: function(name, year) {
        var qtrStore = Ext.getStore( 'quarter.QuarterStore' );
        var qtrCount = qtrStore.getTotalCount();
        var records = qtrStore.getRange( 0, qtrCount );
        for( var i = 0; i < qtrCount; i++ )
        {
            window.console.log( "qtrName=" + records[i].get( 'qtrName' ) );
            window.console.log( "id=" + records[i].get( 'id' ) );
            window.console.log( "qtr_year=" + records[i].get( 'qtr_year' ) );
            if( name == records[i].get( 'qtrName' ) && year == records[i].get( 'qtr_year' ) )
            {
                return records[i];
            }
        }
    }

});
