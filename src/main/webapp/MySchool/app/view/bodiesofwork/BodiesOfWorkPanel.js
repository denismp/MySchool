/*
 * File: app/view/bodiesofwork/BodiesOfWorkPanel.js
 *
 * This file was generated by Sencha Architect version 3.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MySchool.view.bodiesofwork.BodiesOfWorkPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.mybodiesofworkpanel',

    requires: [
        'MySchool.view.bodiesofwork.MyGridPanel'
    ],

    id: 'bodiesofworkpanel',
    layout: {
        align: 'stretch',
        type: 'hbox'
    },
    title: 'Bodies Of Work By Student And Subject',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'mybodiesofworkgridpanel',
                    flex: 1
                },
                {
                    xtype: 'form',
                    flex: 1,
                    id: 'bodyofworkform',
                    width: 508,
                    bodyPadding: 10,
                    title: 'Body Of Work',
                    items: [
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            id: 'bodyofworknametextfield',
                            fieldLabel: 'Name'
                        },
                        {
                            xtype: 'textareafield',
                            id: 'bodyofworkwhattextbox',
                            width: 492,
                            fieldLabel: 'What',
                            size: 5
                        },
                        {
                            xtype: 'textareafield',
                            anchor: '100%',
                            id: 'bodyofworkdescriptiontextbox',
                            fieldLabel: 'Description'
                        },
                        {
                            xtype: 'textareafield',
                            anchor: '100%',
                            id: 'bodyofworkobjectivetextbox',
                            fieldLabel: 'Objective'
                        },
                        {
                            xtype: 'checkboxfield',
                            anchor: '100%',
                            id: 'bodyofworkactivecheckbox',
                            fieldLabel: '',
                            boxLabel: 'Active?',
                            checked: true
                        },
                        {
                            xtype: 'checkboxfield',
                            anchor: '100%',
                            id: 'bodyofworklockcheckbox',
                            fieldLabel: '',
                            boxLabel: 'Lock?'
                        }
                    ]
                }
            ],
            tools: [
                {
                    xtype: 'tool',
                    handler: function(event, toolEl, owner, tool) {
                        // Add refresh handler code here.  Use example from chapter 2 of book.
                    },
                    id: 'toolrefreshstudentsbysubject1',
                    tooltip: 'Refresh',
                    type: 'refresh'
                },
                {
                    xtype: 'tool',
                    handler: function(event, toolEl, owner, tool) {
                        // add search handler code here.
                    },
                    id: 'toolsearchstudentsbysubject1',
                    tooltip: 'Search',
                    type: 'search'
                },
                {
                    xtype: 'tool',
                    handler: function(event, toolEl, owner, tool) {
                        // add new/insert handler code here.
                    },
                    id: 'toolnewstudentsbysubject1',
                    tooltip: 'New',
                    type: 'plus'
                },
                {
                    xtype: 'tool',
                    handler: function(event, toolEl, owner, tool) {
                        // Add save/udate handler code here.
                    },
                    id: 'toolsavestudentsbysubject1',
                    tooltip: 'Save',
                    type: 'save'
                },
                {
                    xtype: 'tool',
                    handler: function(event, toolEl, owner, tool) {
                        // Add delete handler code here.
                    },
                    id: 'tooldeletestudentsbysubject1',
                    tooltip: 'Delete',
                    type: 'minus'
                },
                {
                    xtype: 'tool',
                    handler: function(event, toolEl, owner, tool) {
                        // add lock handler code here.
                    },
                    id: 'toollockstudentsbysubject1',
                    tooltip: 'Lock?',
                    type: 'pin'
                }
            ]
        });

        me.callParent(arguments);
    }

});